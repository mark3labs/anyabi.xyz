package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
)

const blockscoutChainsURL = "https://raw.githubusercontent.com/blockscout/chainscout/refs/heads/main/data/chains.json"

type BlockscoutChain struct {
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Explorers   []Explorer `json:"explorers"`
}

type Explorer struct {
	URL      string `json:"url"`
	HostedBy string `json:"hostedBy"`
}

func main() {
	// Fetch chains data
	resp, err := http.Get(blockscoutChainsURL)
	if err != nil {
		fmt.Printf("Error fetching chains: %v\n", err)
		os.Exit(1)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("Error reading response: %v\n", err)
		os.Exit(1)
	}

	// Parse JSON
	var chains map[string]BlockscoutChain
	if err := json.Unmarshal(body, &chains); err != nil {
		fmt.Printf("Error parsing JSON: %v\n", err)
		os.Exit(1)
	}

	// Generate code
	output := strings.Builder{}
	output.WriteString("// Code generated by go generate. DO NOT EDIT.\n")
	output.WriteString("package main\n\n")
	output.WriteString("var blockscoutConfig map[string]string = map[string]string{\n")

	for chainID, chain := range chains {
		for _, explorer := range chain.Explorers {
			if explorer.HostedBy == "blockscout" {
				// Remove trailing slash if present and add /api
				baseURL := strings.TrimSuffix(explorer.URL, "/")
				output.WriteString(fmt.Sprintf("\t%q: %q,\n", chainID, baseURL+"/api"))
			}
		}
	}

	output.WriteString("}\n")

	// Write to file
	err = os.WriteFile("blockscout_apis_generated.go", []byte(output.String()), 0644)
	if err != nil {
		fmt.Printf("Error writing file: %v\n", err)
		os.Exit(1)
	}
}
